<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>学习总结 on NoManPlay的博客</title>
        <link>https://nomanplay.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</link>
        <description>Recent content in 学习总结 on NoManPlay的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 11 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://nomanplay.github.io/blog/categories/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>R-Tree</title>
        <link>https://nomanplay.github.io/blog/p/r-tree/</link>
        <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://nomanplay.github.io/blog/p/r-tree/</guid>
        <description>&lt;h1 id=&#34;r-tree&#34;&gt;R-Tree&lt;/h1&gt;
&lt;h2 id=&#34;认识-r-tree&#34;&gt;认识 R-Tree&lt;/h2&gt;
&lt;p&gt;B-Tree&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;的搜索本质是一维区间的划分过程，每次搜索节点就是一个子区间。&lt;/p&gt;
&lt;p&gt;R-Tree 是把 B-Tree 的思想拓展到多维空间，采用了 B-Tree 分割空间的思想，是一棵用来存储高维数据的平衡树&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;graph TB
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;level3(level3)--&amp;gt;level2_1(level2_1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;level3(level3)--&amp;gt;level2_2(level2_2)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;level2_1(level2_1)--&amp;gt;level1_1(level1_1)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;level2_1(level2_1)--&amp;gt;level1_2(level1_2)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;level2_2(level2_2)--&amp;gt;level1_3(level1_3)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;level2_2(level2_2)--&amp;gt;level1_4(level1_3)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对于 R-Tree 来说，叶子结点所在层级称为 &lt;em&gt;level 1&lt;/em&gt; ,根结点所在层级称为 &lt;em&gt;level h&lt;/em&gt; ,R-tree 满足以下性质：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有非根节点包含 &lt;em&gt;m-M&lt;/em&gt; 个记录索引（条目）。根结点的记录数可以小于 &lt;em&gt;m&lt;/em&gt;。通常 m= $\frac{M}{2}$&lt;/li&gt;
&lt;li&gt;每一个非叶子结点的分支数和该节点内的条目相同，一个条目对应一个分支，所有叶子节点都位于同一层，因此 R-Tree 为平衡树&lt;/li&gt;
&lt;li&gt;叶子结点的每一个条目表示一个点&lt;/li&gt;
&lt;li&gt;非叶子结点的每一个条目存放的数据结构为&lt;code&gt;(I,child-pointer)&lt;/code&gt;。&lt;code&gt;child-pointer&lt;/code&gt;是指向该条目对应孩子节点的指针，&lt;em&gt;I&lt;/em&gt;表示一个 n 维空间的最小矩形边界&lt;code&gt;(minimum bounding rectangle 即 MBR)&lt;/code&gt;，&lt;em&gt;I&lt;/em&gt;覆盖了该条目对应子树中所有的矩形或点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://s2.loli.net/2022/01/24/yfkvQDZR5wtSWBC.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;mbr&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;两个黑点保存在一个页子节点的两个条目中，恰好框住这两个条目的矩形表示为 $I=(I_0,I_1)$。其中$I_0=(a,b)$，$I_1=(c,d)$，也就是说最小边界矩形是用各个维度的边表示，那么在三维空间中就是立方体，用 3 条边表示即可。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/B-tree&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/B-tree&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;平衡树是计算机科学中的一类数据结构，为改进的二叉查找树。一般的二叉查找树的查询复杂度取决于目标结点到树根的距离（即深度），因此当结点的深度普遍较大时，查询的均摊复杂度会上升。为了实现更高效的查询，产生了。在平衡树这里，平衡指所有叶子的深度趋于平衡，更广义的是指在树上所有可能查找的均摊复杂度偏低。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
